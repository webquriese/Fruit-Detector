import java.awt.image.BufferedImage; 
import java.io.File; 
import java.util.ArrayList;
import java.util.Arrays; 
import javax.imageio.ImageIO; 



public class KMeans 
{ 
    BufferedImage original; 
    BufferedImage result; 
    Cluster[] clusters; 
    public static final int MODE_CONTINUOUS = 1; 
    public static final int MODE_ITERATIVE = 2; 
    
    public Cluster getClusterId ( int x , int y)
    {
        
        for ( Cluster c: clusters)
        {
                for ( String s : c.locations)
                {
                    String []p = s.split( " ");
                    int x1 = Integer.parseInt(p[0]);
                    int y1 = Integer.parseInt(p[1]);
                    if ( x == x1 && y==y1)
                    {                    
                        return c;
                    }
                }
        }
        return null;
    }
    public double getClusterPercentage ( int x , int y)
    {
        double p ;
        double total = 0;
        Cluster c = getClusterId(x, y);        
        for ( Cluster c1: clusters)
        {
                total += c1.pixelCount;
        }
        for ( Cluster c1: clusters)
        {
                double pr = (100*c1.pixelCount)/total;
                System.out.println("Cluster Id"+ c1.getId() + " Percent Count "+pr);
        }
        return ( 100 * c.pixelCount)/total;
    }
    public static void getPixels ( BufferedImage image , int x1 , int y1)
    {
        int w = image.getWidth(); 
        int h = image.getHeight();         
            for (int y=0;y<h;y++) { 
                for (int x=0;x<w;x++) 
                { 
                    int rgb = image.getRGB(x, y); 
                    int r = rgb>>16&0x000000FF;  
                    int g = rgb>> 8&0x000000FF;  
                    int b = rgb>> 0&0x000000FF;  
                    if ( x1 == x && y1 == y)
                    {
                        System.out.println("------------------------------Red"+r + " Green " + g + "Blue " + b); 
                    }
                }
            }
    }
     
    public static void run(File srcf,File destf)
    {
        String src = srcf.getAbsolutePath(); 
        String dst = destf.getAbsolutePath(); 
        int k = Integer.parseInt("4"); 
        String m = "-i"; 
        int mode = 3; 
        if (m.equals("-i")) { 
            mode = MODE_ITERATIVE; 
        } else if (m.equals("-c")) { 
            mode = MODE_CONTINUOUS; 
        }          
        KMeans kmeans = new KMeans(); 
        BufferedImage dstImage = kmeans.calculate(loadImage(src),k,mode);         
        saveImage(dst, dstImage); 
    }
    
    public static void main(String[] args) { 
        
        String src = "d:/f1.jpg"; 
        String dst = "d:/f.jpg"; 
        int k = Integer.parseInt("3"); 
        String m = "-i"; 
        int mode = 3; 
        if (m.equals("-i")) { 
            mode = MODE_ITERATIVE; 
        } else if (m.equals("-c")) { 
            mode = MODE_CONTINUOUS; 
        } 
         
        
        KMeans kmeans = new KMeans(); 
        BufferedImage dstImage = kmeans.calculate(loadImage(src),k,mode);         
        for ( Cluster c : kmeans.clusters)
        {
            System.out.println(c.getId());
            System.out.println("Red"+c.red + " Green " + c.green + "Blue " + c.blue); 
            System.out.println(c.pixelCount + "\t" + c.locations.size());
            
        }
        
        saveImage(dst, dstImage); 
        getPixels(dstImage, 4 ,5);
        Cluster c = kmeans.getClusterId(4, 5);
        System.out.println(c.id);
        
    } 
     
    public KMeans() {    } 
     
    public BufferedImage calculate(BufferedImage image,  
                                            int k, int mode) { 
        long start = System.currentTimeMillis(); 
        
        int w = image.getWidth(); 
        int h = image.getHeight();         
        clusters = createClusters(image,k);         
        int[] lut = new int[w*h]; 
        Arrays.fill(lut, -1);          
        boolean pixelChangedCluster = true;         
        int loops = 0; 
        while (pixelChangedCluster) { 
            pixelChangedCluster = false; 
            loops++; 
            for (int y=0;y<h;y++) { 
                for (int x=0;x<w;x++) { 
                    int pixel = image.getRGB(x, y); 
                    Cluster cluster = findMinimalCluster(pixel); 
                    if (lut[w*y+x]!=cluster.getId()) { 
                        
                        if (mode==MODE_CONTINUOUS) { 
                            if (lut[w*y+x]!=-1) { 
                                // remove from possible previous  
                                // cluster 
                                clusters[lut[w*y+x]].removePixel( 
                                                            pixel); 
                            } 
                            // add pixel to cluster 
                            cluster.addPixel(x,y,pixel); 
                            
                            
                        } 
                        // continue looping  
                        pixelChangedCluster = true; 
                     
                        // update lut 
                        lut[w*y+x] = cluster.getId(); 
                    } 
                } 
            } 
            if (mode==MODE_ITERATIVE) { 
                // update clusters 
                for (int i=0;i<clusters.length;i++) { 
                    clusters[i].clear(); 
                } 
                for (int y=0;y<h;y++) { 
                    for (int x=0;x<w;x++) { 
                        int clusterId = lut[w*y+x]; 
                        // add pixels to cluster 
                        clusters[clusterId].addPixel(x,y, 
                                            image.getRGB(x, y)); 
                    } 
                } 
            } 
             
        } 
        // create result image 
        BufferedImage result = new BufferedImage(w, h,  
                                    BufferedImage.TYPE_INT_RGB); 
        for (int y=0;y<h;y++) { 
            for (int x=0;x<w;x++) { 
                int clusterId = lut[w*y+x]; 
                result.setRGB(x, y, clusters[clusterId].getRGB()); 
            } 
        } 
        long end = System.currentTimeMillis(); 
        System.out.println("Clustered to "+k 
                            + " clusters in "+loops 
                            +" loops in "+(end-start)+" ms."); 
        return result; 
    } 
     
    public Cluster[] createClusters(BufferedImage image, int k) { 
        Cluster[] result = new Cluster[k]; 
        int x = 0; int y = 0; 
        int dx = image.getWidth()/k; 
        int dy = image.getHeight()/k; 
        for (int i=0;i<k;i++) { 
            result[i] = new Cluster(i,image.getRGB(x, y)); 
            x+=dx; y+=dy; 
        } 
        return result; 
    } 
     
    public Cluster findMinimalCluster(int rgb) { 
        Cluster cluster = null; 
        int min = Integer.MAX_VALUE; 
        for (int i=0;i<clusters.length;i++) { 
            int distance = clusters[i].distance(rgb); 
            if (distance<min) { 
                min = distance; 
                cluster = clusters[i]; 
            } 
        } 
        return cluster; 
    } 
     
    public static void saveImage(String filename,  
            BufferedImage image) { 
        File file = new File(filename); 
        try { 
            ImageIO.write(image, "jpg", file); 
        } catch (Exception e) { 
            System.out.println(e.toString()+" Image '"+filename 
                                +"' saving failed."); 
        } 
    } 
     
    public static BufferedImage loadImage(String filename) { 
        BufferedImage result = null; 
        try { 
            result = ImageIO.read(new File(filename)); 
        } catch (Exception e) { 
            System.out.println(e.toString()+" Image '" 
                                +filename+"' not found."); 
        } 
        return result; 
    } 
     
   
     
} 